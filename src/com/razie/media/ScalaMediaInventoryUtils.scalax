package com.razie.media;

import java.io.File;

import com.razie.assets.Asset;
import com.razie.assets.AssetsInventory;
import com.razie.media.config.MediaConfig;
import com.razie.pub.UnknownRtException;
import com.razie.pub.assets.AssetKey;
import com.razie.pub.assets.AssetLocation;
import com.razie.pub.assets.AssetMgr;
import com.razie.pub.base.ActionItem;

object ScalaMediaInventoryUtils {
   def moveToCat(ref:AssetKey , cat:String ) {
      // 1. find the storage
     val as = new Asset(AssetMgr.brief(ref));
     val fullpath = as.getBrief().getLocalDir() + as.getBrief().getFileName();

     val locationPath = MediaConfig.findLocalStorageLocation(ref.getLocation().getHost(), fullpath);

      val oldfile = new File(fullpath);

      // 2. create a bin if it's not there
      val bin = new File(locationPath + "/" + cat);
      if (!bin.exists()) {
         if (!bin.mkdir()) {
            throw new RuntimeException("could not create directory " + bin.getAbsolutePath());
         }
      }

      // 3. move to bin...
      val newfile = new File(bin, as.getBrief().getFileName());

      if (!oldfile.renameTo(newfile))
         throw new UnknownRtException("ERR can't rename "+oldfile.getCanonicalPath + " TO " + newfile.getCanonicalPath);

      // 4. move the pic if any
      val pics = AssetsInventory.findPicFileName(as.getBrief().getLocalDir(), as.getBrief().getFileName());
      if (pics != null) {
         val oldfile = new File(as.getBrief().getLocalDir() + pics);
         val newfile = new File(bin, pics);

         if (!oldfile.renameTo(newfile))
            throw new UnknownRtException("can't rename PICTURE to bin...");
      }
   }

    def delegateCmd(appEnv:AssetLocation , delete2:ActionItem , ref:AssetKey ) = {
      // TODO Auto-generated method stub
      "TODO...";
   }
}
